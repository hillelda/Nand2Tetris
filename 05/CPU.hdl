// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    Not(in = instruction[15],out = aIns);
    And(a = instruction[15],b = instruction[5], out = aLoad);

    Mux16(a=instruction,b=aluout, sel=instruction[15], out=outToA);

    
    Or(a = aIns, b = aLoad, out = loadToA);

    ARegister(in=outToA, load=loadToA, out=aRegOut, out[0..14]=addressM);

    And(a=instruction[15], b=instruction[4], out=Dload);

    DRegister(in=aluout, load=Dload, out=dRegOut );

    Mux16(a=aRegOut, b=inM, sel=instruction[12], out=yForALU);
    ALU(x=dRegOut, y=yForALU, zx=instruction[11], nx=instruction[10], zy=instruction[9],
                 ny=instruction[8], f=instruction[7], no=instruction[6], out=outM, out=aluout, zr=zr, ng=ng);

    Or(a=zr, b=ng, out=temp);
    Not(in=temp, out=pos);

    //null
    Or(a=instruction[0], b=instruction[1], out=insrct01);
    Or(a=insrct01, b=instruction[2], out=insrct012);
    Not(in=insrct012, out=null);

    //JGT
    And(a=pos, b=instruction[0], out=jgt);
    
    //JEQ
    And(a=zr, b=instruction[1], out=jeq);

    //JGE
    Or(a=jgt, b=jeq, out=jge);

    //JLT
    And(a=ng, b=instruction[2], out=jlt);

    //JNE
    Not(in=jeq, out=jne);

    //JLE
    Or(a=jlt, b=jeq, out=jle);

    //JMP
    Or(a=jlt, b=jge, out=jmp);

    //inc
    Not(in=jmp, out=Cinc);

    // A and C type
    Or(a=Cinc, b=aIns, out=inc);
    And(a=jmp, b=instruction[15], out=PCload);

    PC(in=aRegOut, load=PCload, inc=inc, reset=reset, out[0..14]=pc);
    And(a=instruction[15], b=instruction[3], out=writeM);
}